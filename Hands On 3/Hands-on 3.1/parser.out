Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr PLUS expr
Rule 2     expr -> expr MINUS expr
Rule 3     expr -> expr TIMES expr
Rule 4     expr -> expr DIVIDE expr
Rule 5     expr -> MINUS expr
Rule 6     expr -> LPAREN expr RPAREN
Rule 7     expr -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 4
LPAREN               : 6
MINUS                : 2 5
NUMBER               : 7
PLUS                 : 1
RPAREN               : 6
TIMES                : 3
error                : 

Nonterminals, with rules where they appear

expr                 : 1 1 2 2 3 3 4 4 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8


state 2

    (5) expr -> MINUS . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 9

state 3

    (6) expr -> LPAREN . expr RPAREN
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 10

state 4

    (7) expr -> NUMBER .

    PLUS            reduce using rule 7 (expr -> NUMBER .)
    MINUS           reduce using rule 7 (expr -> NUMBER .)
    TIMES           reduce using rule 7 (expr -> NUMBER .)
    DIVIDE          reduce using rule 7 (expr -> NUMBER .)
    $end            reduce using rule 7 (expr -> NUMBER .)
    RPAREN          reduce using rule 7 (expr -> NUMBER .)


state 5

    (1) expr -> expr PLUS . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 11

state 6

    (2) expr -> expr MINUS . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 12

state 7

    (3) expr -> expr TIMES . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 13

state 8

    (4) expr -> expr DIVIDE . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . MINUS expr
    (6) expr -> . LPAREN expr RPAREN
    (7) expr -> . NUMBER

    MINUS           shift and go to state 2
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expr                           shift and go to state 14

state 9

    (5) expr -> MINUS expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    PLUS            reduce using rule 5 (expr -> MINUS expr .)
    MINUS           reduce using rule 5 (expr -> MINUS expr .)
    TIMES           reduce using rule 5 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 5 (expr -> MINUS expr .)
    $end            reduce using rule 5 (expr -> MINUS expr .)
    RPAREN          reduce using rule 5 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]


state 10

    (6) expr -> LPAREN expr . RPAREN
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    RPAREN          shift and go to state 15
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8


state 11

    (1) expr -> expr PLUS expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    PLUS            reduce using rule 1 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 1 (expr -> expr PLUS expr .)
    $end            reduce using rule 1 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 1 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8

  ! TIMES           [ reduce using rule 1 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 1 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]


state 12

    (2) expr -> expr MINUS expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    PLUS            reduce using rule 2 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 2 (expr -> expr MINUS expr .)
    $end            reduce using rule 2 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 2 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8

  ! TIMES           [ reduce using rule 2 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 2 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]


state 13

    (3) expr -> expr TIMES expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    PLUS            reduce using rule 3 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 3 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 3 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 3 (expr -> expr TIMES expr .)
    $end            reduce using rule 3 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 3 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]


state 14

    (4) expr -> expr DIVIDE expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr

    PLUS            reduce using rule 4 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 4 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 4 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 4 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 4 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 4 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]


state 15

    (6) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 6 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 6 (expr -> LPAREN expr RPAREN .)

